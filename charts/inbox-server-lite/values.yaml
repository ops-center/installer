dns:
  ## Default domain for all emailing components
  # jmapUrl: "jmap.example.com"
  # adminUrl: "admin.example.com"
  # smtpHostname: "smtp.example.com"
  domain: ""
  # in ip mode, the emailDomain is ace.internal, otherwise same as domain
  emailDomain: ""
  targetIPs: []

# Default values for james
james:
  replicaJmapInstanceCount: 1
  replicaImapSmtpInstanceCount: 0
  image: ghcr.io/appscode/inbox-server:postgres-latest
  ## Environment for James
  env:
    jamesCassandraKeyspace: sandbox_james
    jamesCassandraCacheKeyspace: sandbox_james_cache
    jamesEsMailboxIndex: "mailbox_v1"
    jamesEsClusterName: "change-me"
    jamesEsHostScheme: "http"
    jamesEsSslValidationStrategy: "default"
    jamesEsHostNameVerifier: "default"
    jamesEsNbShards: 5
    jamesEsNbReplica: 1
    jamesEsMailboxReadAlias: "read-mailbox"
    jamesEsMailboxWriteAlias: "write-mailbox"
    jamesRabbitHost: "inbox-server-rabbitmq"
    jamesMessageSize: 25M
    jamesDkimSignSmtp: "dkimselector"
    jamesDkimSignDomain: "mail.example.com"
    cassandraReplicationFactor: 1
    jamesKeyStorePassword: james72laBalle
    jamesHELOMessage: "change-me"
    jvmOpts: "-Xms3g -Xmx3g"
    glowroot:
      enabled: false
    jamesResources:
      limits:
        cpu: "2000m"
        memory: "4Gi"
      requests:
        cpu: "1000m"
        memory: "4Gi"
  tls:
    # secretName: the-name-of-a-secret
    secretName: ""

# Requires Prometheus Operator to be installed
serviceMonitor:
  enabled: false
  # Labels for Prometheus Operator to detect ServiceMonitor. Cannot be empty 
  additionalLabels:
    change-me: change-me
  # Scrape interval. Use Prometheus default value if not specified
  interval: 30s

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: name-of-the-cluster-issuer
  tls:
    secretName: the-name-of-a-secret

adminIngress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: name-of-the-cluster-issuer
  tls:
      secretName: the-name-of-a-secret

postgresql:
  ## @param postgresql.enabled enable the bitnami/postgresql subchart and deploy Postgres
  enabled: true

#-------------------

replicaCount: 1

# imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
# podSecurityContext: # +doc-gen:break
#   fsGroup: 65534

securityContext: {}
# securityContext: # +doc-gen:break
#   allowPrivilegeEscalation: false
#   capabilities:
#     drop: ["ALL"]
#   readOnlyRootFilesystem: true
#   runAsNonRoot: true
#   runAsUser: 65534
#   seccompProfile:
#     type: RuntimeDefault

service:
  type: ClusterIP
  # port: 80

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
